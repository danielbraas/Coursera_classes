trControl = trainControl(method = "cv", number = 10))
svmFit10CV
lines(svmFit10CV)
lines(svmFit10CV[,1:2])
str(svmFit10CV)
set.seed(1056)
svmFitLOO <- train(Class ~ .,
data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneGrid = svmTuneGrid,
trControl = trainControl(method = "LOOCV"))
svmFitLOO
set.seed(1056)
svmFitLGO <- train(Class ~ .,
data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneGrid = svmTuneGrid,
trControl = trainControl(method = "LGOCV",
number = 50,
p = .8))
svmFitLGO
set.seed(1056)
svmFitBoot <- train(Class ~ .,
data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneGrid = svmTuneGrid,
trControl = trainControl(method = "boot", number = 50))
svmFitBoot
set.seed(1056)
svmFitBoot632 <- train(Class ~ .,
data = GermanCreditTrain,
method = "svmRadial",
preProc = c("center", "scale"),
tuneGrid = svmTuneGrid,
trControl = trainControl(method = "boot632",
number = 50))
svmFitBoot632
set.seed(1056)
glmProfile <- train(Class ~ .,
data = GermanCreditTrain,
method = "glm",
trControl = trainControl(method = "repeatedcv",
repeats = 5))
glmProfile
resamp <- resamples(list(SVM = svmFit, Logistic = glmProfile))
summary(resamp)
modelDifferences <- diff(resamp)
summary(modelDifferences)
?diff
modelDifferences$statistics$Accuracy
boxplot(resamp)
boxplot(summary(resamp))
str(resamp)
resamp$values
resamp$values[,2]
boxplot(resamp$values[,c(2,4)])
?resamples
resamp1 <- resamples(list(SVM1 = svmFit,
CV10=svmFit10CV,
LOOCV=svmFitLOO,
LGOCV=svmFitLGO,
Boot=svmFitBoot,
Boot632=svmFitBoot632,
Logistic = glmProfile))
resamp1
boxplot(resamp$values[,c(2,4)], main='Comparison: Accuracy')
modelDifferences$statistics$Accuracy
library(rpart)
rpart1 <- rpart(Class ~ ., data = training,
control = rpart.control(maxdepth = 2))
data(segmentationData)
names(segmentationData)[1:6]
training=segmentationData['Case'=='training',]
head(segmentationData$Case)
training=segmentationData['Case'=='Train',]
training=segmentationData[,'Case'=='Train',]
testing=segmentationData[,'Case'=='Test',]
training=segmentationData[,'Case'=='Train']
training=segmentationData[segmentationData$Case=='Train',]
testing=segmentationData[segmentationData$Case=='Test',]
table(segmentationData$Case)
names(training)[1::10]
names(training)[1:10]
testing[,1]=NULL
training[,1]=NULL
rpart1 <- rpart(Class ~ ., data = training,
control = rpart.control(maxdepth = 2))
rpart
rpart`
rpart1
prettyRpartPlot(rpart1)
apropos(prettyRpartPlot)
apropos('prettyRpartPlot')
plot(rpart1)
str(rpart1)
str(rpart1$finalModel)
rpartrpart1a <- as.party(rpart1)
rpart1a <- as.party(rpart1)
library(partykit)
install.packages('partykit')
library(partykit)
rpart1a <- as.party(rpart1)
plot(rpart1a)
plot.rpart(rpart1)
rpartFull <- rpart(Class ~ ., data = training)
rpartFull
test=as.party(rpartFull)
plot(test)
rpartPred <- predict(rpartFull, testing, type = "class")
confusionMatrix(rpartPred, testing$Class)
?train
train(Class ~ ., data = training, method = "rpart")
test=train(Class ~ ., data = training, method = "rpart")
test$bestTune
test1=train(Class ~ ., data = training, method = "rpart", tuneLength=30)
test1
test1$bestTune
str(test1)
ls(test1)
test$finalModel
test
test1
ls(test1)
test1$results
with(test1$results, plot(cp, Accuracy, pch=20, type='b'))
cvCtrl <- trainControl(method = "repeatedcv", repeats = 3)
train(Class ~ ., data = training, method = "rpart",
tuneLength = 30,
trControl = cvCtrl)
cvCtrl
boxplot(resamp$values[,c(2,4)], main='Comparison: Accuracy')
?runif
install.packages('doMC')
library(AppliedPredictiveModeling)
data(twoClassData)
install.packages('doSNOW', dependencies=c('Depends','Suggests'))
load("C:/Users/dbraas/Dropbox/R/QE Testdata/Mallick-13CGlc/10082014/10092014/workspace.RData")
head(data3)
100/150*log2(100/150)+50/150*log2(50/150)
entropie=function((a,b)) {-1*(a/(a+b)*log2(a/(a+b))+b/(a+b)*log2(b/(a+b)))}
entropie=function(a,b) {-1*(a/(a+b)*log2(a/(a+b))+b/(a+b)*log2(b/(a+b)))}
entropie(50,100)
entropie(80,15)
entropie(20,35)
95/150*0.629+55/150*0.946
61/361
install.packages('KEGGREST', dependencies='Depends')
library(KEGGREST)
install.packages("KEGGREST")
library(xlsx)
library(xlsx)
install.packages('swirl')
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?`+`
5%%4
5%%2
5%%1
?`%%`
5%/%5
5%/%2
5%/%3
5%/%4
?`&&`
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement=T, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replacement=TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(10, size = 100, prob = 0.7)
plot(rbinom(10, size = 100, prob = 0.7))
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, mean=10)
?rpois
rpois(5, 10)
plot(dpois(100))
plot(dpois(100, 1))
plot(dpois(100, 10))
my_pois <- replicate(100, rpois(5, 10))
plot(my_pois, pch=20)
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1=Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(cairoDevice)
library(RGtk2)
library(xcms)
install.packages(c("abind", "AER", "AICcmodavg", "boot", "BradleyTerry2", "C50", "car", "choroplethr", "class", "clue", "cluster", "coda", "codetools", "colorspace", "copula", "CORElearn", "corrgram", "coxme", "d3Network", "deldir", "Ecfun", "fdrtool", "fields", "flexmix", "Formula", "gamlss", "gamlss.dist", "gbm", "ggm", "ggmap", "gstat", "Hmisc", "ipred", "KernSmooth", "knitr", "ks", "lattice", "lava", "manipulate", "maptools", "MASS", "Matrix", "mboost", "mgcv", "minqa", "multcomp", "multicool", "MuMIn", "ordinal", "pan", "party", "partykit", "pbivnorm", "pheatmap", "plotrix", "proxy", "pscl", "psych", "qgraph", "qvcalc", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "R2jags", "RandomFields", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "relations", "relimp", "rgdal", "RgoogleMaps", "rmarkdown", "rms", "rockchalk", "RODBC", "Rsymphony", "spacetime", "spatstat", "spdep", "survival", "tseries", "TSP", "unmarked", "VGAM", "zoo"))
install.packages(c("abind", "AER", "AICcmodavg", "boot", "BradleyTerry2",
install.packages(c("abind", "AER", "AICcmodavg", "boot", "BradleyTerry2", "C50", "car", "choroplethr", "class", "clue", "cluster", "coda", "codetools", "colorspace", "copula", "CORElearn", "corrgram", "coxme", "d3Network", "deldir", "Ecfun", "fdrtool", "fields", "flexmix", "Formula", "gamlss", "gamlss.dist", "gbm", "ggm", "ggmap", "gstat", "Hmisc", "ipred", "KernSmooth", "knitr", "ks", "lattice", "lava", "manipulate", "maptools", "MASS", "Matrix", "mboost", "mgcv", "minqa", "multcomp", "multicool", "MuMIn", "ordinal", "pan", "party", "partykit", "pbivnorm", "pheatmap", "plotrix", "proxy", "pscl", "psych", "qgraph", "qvcalc", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "R2jags", "RandomFields", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "relations", "relimp", "rgdal", "RgoogleMaps", "rmarkdown", "rms", "rockchalk", "RODBC", "Rsymphony", "spacetime", "spatstat", "spdep", "survival", "tseries", "TSP", "unmarked", "VGAM", "zoo"))
install.packages(c("abind", "AER", "AICcmodavg", "boot", "BradleyTerry2",
install.packages(c("abind", "AER", "AICcmodavg"))
install.packages(c("boot", "BradleyTerry2", "C50", "car", "choroplethr", "class", "clue", "cluster", "coda", "codetools", "colorspace", "copula", "CORElearn", "corrgram", "coxme", "d3Network", "deldir", "Ecfun", "fdrtool", "fields", "flexmix", "Formula", "gamlss", "gamlss.dist", "gbm", "ggm", "ggmap", "gstat", "Hmisc", "ipred", "KernSmooth", "knitr", "ks", "lattice", "lava", "manipulate", "maptools", "MASS", "Matrix", "mboost", "mgcv", "minqa", "multcomp", "multicool", "MuMIn", "ordinal", "pan", "party", "partykit", "pbivnorm", "pheatmap", "plotrix", "proxy", "pscl", "psych", "qgraph", "qvcalc", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "R2jags", "RandomFields", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "relations", "relimp", "rgdal", "RgoogleMaps", "rmarkdown", "rms", "rockchalk", "RODBC", "Rsymphony", "spacetime", "spatstat", "spdep", "survival", "tseries", "TSP", "unmarked", "VGAM", "zoo"))
library(xcms)
library(CAMERA)
file <- system.file('mzdata/MM14.mzdata', package = "CAMERA")
xs <- xcmsSet(file,method="centWave",ppm=30,peakwidth=c(5,10))
library(faahKO)
filepath <- system.file("cdf", package = "faahKO")
xsg <- group(faahko)
xsg <- fillPeaks(xsg)
xsg
xsa <- xsAnnotate(xs)
test=findAdducts(xsa)
xsa
xsa@polarity
an <- xsAnnotate(xs)
an
anF <- groupFWHM(an, perfwhm = 0.6)
anI <- findIsotopes(anF, mzabs = 0.01)
anI@pspectra
str(anI@pspectra)
str(anI)
?xsAnnotate
anI@annoGrp
anI@annoID
anI@groupInfo
plotChrom(xs)
anI@pspectra
anI@ruleset
library(xcms)
plot(1,1, pch=20)
an
xs
xsg
str(anI)
plotEICs(anI, maxlabel=5)
plotEICs(anI, 1,maxlabel=5)
plotEICs(anI,maxlabel=5, sleep=1)
anI@annoGrp
anI@isoID
anI@isotopes
anI@runParallel
library(mzmatch.R)
mzmatch.init()
install.packages(c("evaluate", "geosphere", "glmnet", "gtools", "jsonlite", "manipulate", "MPV", "raster", "Rcpp"))
install.packages(c("evaluate", "geosphere", "glmnet", "gtools",
install.packages(c("evaluate", "geosphere", "glmnet", "gtools", "jsonlite", "manipulate", "MPV", "raster", "Rcpp"))
library("mzmatch.R", lib.loc="~/R/win-library/3.1")
library(mzmatch.R)
library(mzmatch.R)
PeakML.Viewer()
C=12.00000
13C=
H=1.007825035
D=2.014102
Tr=3.016049
Li=7.016003
N=14.003074
O=15.99491463
Fl=18.99840322
Na=22.9897677
P=30.973762
S=31.9720707
Cl=34.96885272
K=38.9637074
Ca=39.9625906
Fe=55.9349393
Ni=57.9353462
Cu=62.9295989
Zn=63.9291448
Br=78.9183361
Se=79.9165196
Ag=106.905092
I=126.904473
Au=196.966543
Hg=201.970617
2*H+O
6*C+12*H+6*O
par
options(digits=6)
6*C+12*H+6*O
options(digits=15)
6*C+12*H+6*O
options(digits=20)
6*C+12*H+6*O
options(digits=17)
6*C+12*H+6*O
options(digits=15)
6*C+12*H+6*O*10
source("http://bioconductor.org/biocLite.R")
biocLite("graphite")
source("http://bioconductor.org/biocLite.R")
biocLite("RCytoscape")
source("http://bioconductor.org/biocLite.R")
biocLite("geecc")
install.packages('geecc', dependencies='Depends')
biocLite("geecc")
list.files()
?list.files()
file.info(list.files())
test=file.info(list.files())
test
str(test)
test[,c(4:6)]
test[1,]
test[1,'mtime']
test1=test[1,'mtime']
str(test1)
difftime(test$mtime, test$atime)
difftime(test$mtime, test$atime, units=c('days', 'hours'))
difftime(test$mtime, test$atime, units=c'days')
difftime(test$mtime, test$atime, units='days')
format(test1, )
?format
difftime(test$mtime, test$atime, format='%H:%M')
as.POSIXct(test1,'%Y')
as.POSIXct(test1,format='%Y')
format(test1, format='%Y')
strptime(test1, format='%Y')
format(test1, format='%Y')
test=file.info(list.files())
test1=test$mtime
heaad(test1)
head(test1)
test2=format(test1, format('%Y'))
test2
test2=format(test1, format('%M%Y'))
test2
test2=format(test1, format('%m%Y'))
test2
test2=format(test1, format('%m-%Y'))
test2
?difftime
test3=difftime('01-01-2015', test1, units='days')
test3
a=as.POSICct('01-01-2015')
a=as.POSIXct('01-01-2015')
a
date()
test3=difftime(date(), test1, units='days')
head(test1)
str(test1)
a=date()
a
str(a)
class(a)
as.POSIXct(date())
?date
Sys.time()
test3=difftime(Sys.time(), test1, units='days')
test3
round(test3,0)
which.min(test3)
test1[34,]
test1[34]
test[34,]
library(KEGGREST)
listDatabases()
keggList("pathway",'hsa')[1:10]
keggGet(hsa00010)
keggGet('hsa00010')
tail(keggList('pathway', hsa))
tail(keggList('pathway', 'hsa'))
head(keggList('pathway', 'hsa'),20)
head(keggList('pathway', 'hsa'),100)
str(keggList('pathway','hsa'))
pathways=data.frame(keggList('pathway','hsa'))
head(pathways)
nrow(pathways)
pathways
Vm=keggGet('hsa05416')
str(Vm)
head(pathways)
path.metabolites=function(Name,Org){
name=keggFind('pathway',Name)
compounds=as.data.frame(keggGet(paste(Org,gsub('[a-z]*:[a-z]*','', names(name)), sep=''))[[1]]$COMPOUND)
compounds$KEGG.ID=rownames(compounds)
rownames(compounds)=NULL
names(compounds)=c('Metabolite','KEGG.ID')
return(compounds)
}
path.metabolites('Glycolysis','hsa')
tail(pathwyas)
tail(pathways)
path.metabolites('Viral myocarditis','hsa')
glyc=keggGet('hsa00010')
head(glyc)
Vm
length(pathways)
nrow(pathways)
Vm$COMPOUND
pathways[10]
pathways[10,]
anmes(pathways[10,])
names(pathways[10,])
head(pathways)
rownames(pathways[10,])
str(pathways)
pathways[1,]
names(pathways)
rownames(pathways)
rownames(pathways)[10,]
rownames(pathways)[10]
keggGet('hsa00071')[[1]]$COMPOUND
keggGet('hsa05071')[[1]]$COMPOUND
rownames(pathways)[290]
keggGet('hsa05340')[[1]]$COMPOUND
test=keggGet(keggList('pathway','hsa'))[[1]]$COMPOUND
test
keggList('pathway','hsa')[1]
rownames(keggList('pathway','hsa')[1])
names(keggList('pathway','hsa')[1])
gsub('path:','',names(keggList('pathway','hsa')[1]))
keggGet(gsub('path:','',names(keggList('pathway','hsa')[1])))[[1]]$COMPOUND
length(keggGet(gsub('path:','',names(keggList('pathway','hsa')[1])))[[1]]$COMPOUND)
length(keggGet(gsub('path:','',names(keggList('pathway','hsa')[294])))[[1]]$COMPOUND)
num.metabolites=length(keggGet(gsub('path:','',names(keggList('pathway','hsa'))))[[1]]$COMPOUND)
num.metabolites[i]=length(keggGet(gsub('path:','',names(keggList('pathway','hsa'))))[[1]]$COMPOUND)
num.metabolites=vector()
num.metabolites=vector()
length(keggList('pathway','hsa'))
for(i in 1:length(keggList('pathway','hsa'))){
num.metabolites[i]=length(keggGet(gsub('path:','',names(keggList('pathway','hsa')[i])))[[1]]$COMPOUND)
}
num.metabolites
rownames(pathways)[293]
keggGet('hsa05414')[[1]]$COMPOUND
glyc
keggGet('hsa05414')[[1]]$CLASS
pathways$Number_of_metabolites=num.metabolites
for(i in 1:length(keggList('pathway','hsa'))){
pathways$Class[i]=length(keggGet(gsub('path:','',names(keggList('pathway','hsa')[i])))[[1]]$CLASS)
}
for(i in 1:length(keggList('pathway','hsa'))){
pathways$Class[i]=keggGet(gsub('path:','',names(keggList('pathway','hsa')[i])))[[1]]$CLASS
}
head(pathways)
head(pathways,50)
keggGet('hsa00533')
tail(pathways)
write.csv(pathways,'KEGG pathways.csv')
write.xlsx(pathways,'KEGG pathways.xlsx')
library(xlsx)
write.xlsx(pathways,'KEGG pathways.xlsx')
save(pathways, file='KEGG pathways.rdata')
library(dplyr)
??dplyr
browseVignettes(package = "dplyr")
setwd("C:/Users/Daniel/datasciencecoursera/GetAndClean")
list.files()
test=read.table("Tidy data frame.txt", header=T)
levels(test$Activity)
